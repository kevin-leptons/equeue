.TH man 3 "$BUILD_DATE" "$VERSION" "equeue man page"

.SH NAME
equeue \- Error Queue

.SH SYNOPSIS
.nf
#include <equeue/equeue.h>
.sp
// MACROS as functions
void equeue_push(const char *err_space, code,
                 const char (*errstr)(size_t code));
void equeue_emit();
void equeue_spush(code);
void equeue_cspush();
equeue_eitem * equeue_pop();
equeue_eitem * equeue_top();
size_t equeue_size();
void equeue_clear();
void equeue_dump();
void equeue_dumpto(int fd);

// FUNCTIONS
void equeue_eitem_errstr(struct equeue_eitem *eitem, char *str,
                         size_t size);

.SH COMPLEXITY
.nf
fn                              Big-O
--------------------------------------
equeue_push()                   O(1)
equeue_spush()                  O(1)
equeue_epushn()                 O(1)
equeue_emit()                   O(1)
equeue_pop()                    O(1)
equeue_top()                    O(1)
equeue_dump()                   O(n)
equeue_dumpto()                 O(n)
equeue_clear()                  O(1)
equeue_size()                   O(1)
equeue_eitem_errstr()           O(1) 

.SH DESCRIPTION
C language doesn't provides built-in Error Handling mechanisms. Internal
library deal that prolems by solutions such as error code or longjmp() but
with multi-library using, problems becomes complicated. That is reason to
use equeue.

equeue use Shared Error Queue (SEQ) to stores Error Items (EIs). EIs
contains information about error such as file, line number, error code and
function which convert error to string. SEQ is shared in internal process,
that mean SEQ will be the same in process or between threads in process.

To use equeue, library MUST define your Error Space, inludes: Error Codes,
Error Strings, Error String Function, Error Pushing Function. Error Codes
is unique unsigned integer number represent for unique Error. Error
Strings is strings correspond with Error Codes. Error String Function
convert Error Code to Error String with interface const char *
(*err_str)(size_t code). Error Pushing Function push Error Code into SEQ.

Detect information about error at runtime is hard, not performance or
imposible in some case, so it is detect in complie time. For that, equeue
can't provides same APIs for all other libraries and you MUST self-define
Error Pushing Function.

equeue_push() push EI into SEQ. equeue_spush() push System Error Code into
SEQ. equeue_cspush() push current system error "errno" into SEQ.
equeue_emit() push EQUEUE_EEMIT into SEQ. equeue_pop() removes front EIs
of SEQ then return pointer to it.  equeue_top() return pointer to front
EIs of SEQ.  equeue_size() return number of EIs in SEQ.  equeue_dump() and
equeue_dumpto() print SEQ to ouput file descriptor and empty SEQ.
equeue_clear() empty SEQ.  equeue_errstr() create string with error
information of item.

Whenever error occurs, if it can be solve then MUST NOT push it into SEQ
and MUST call equeue_clear() to clear SEQ to ensure that prev errors isn't
mistake with next calls.

.SH SIGNALS
.B
SIGABRT
on SEQ is full, size of SEQ is 1024

.SH EXAMPLES
See /usr/share/doc/equeue/example/*.c

.SH FILES
.TP 4
/usr/lib/equeue.so 
Dynamic library file

.TP
/usr/include/equeue/*.h
Header files.

.TP
/usr/share/man/man3/equeue.3.gz
Manunal file.

.SH REFERENCES 
Development repository at https://github.com/kevin-leptons/equeue

.SH AUTHORS
Kevin Leptons <kevin.leptons@gmail.com>
